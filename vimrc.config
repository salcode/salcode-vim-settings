" .vimrc configuration settings

" ----- Basic Options ------
set encoding=utf-8

" ----- Display Options ------
    set nocompatible

    " hide the toolbar
     set guioptions-=T

    " wrap long lines
    set wrap
    " keep three lines visible above and below
    set scrolloff=3


    " show line numbers
    set nu

    " highlight current line
    set cursorline

    " enable syntax highlighting
    syntax enable

    " show matching brackets/parenthesis
    set showmatch

    " search as you type
    set incsearch
    " highlight the search
    set hlsearch

    " ignore case for searches
    set ignorecase
    " ...unless the search uses uppercase letters
    set smartcase

    " show spelling issues
    " set spell

    " instead of beep, flash screen
     set vb t_vb=

    " use clipboard as primary register for y,d,p
     set clipboard=unnamed

    " wildmenu / wildmode controls tab completion when you hit colon
    " and enter the command line
    " http://vim.wikia.com/wiki/Great_wildmode/wildmenu_and_console_mouse

    " show list instead of just completing on tab completion
    set wildmenu
    " command <Tab> completion, list matches, then longest common part, then all.
    set wildmode=list:longest,full
    " files to ignore for wildmode
    set wildignore+=.hg,.git,.svn                    " Version control
    set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
    set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
    set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
    set wildignore+=*.spl                            " compiled spelling word lists
    set wildignore+=*.sw?                            " Vim swap files
    set wildignore+=*.DS_Store                       " OSX bullshit

    set wildignore+=*.luac                           " Lua byte code

    set wildignore+=migrations                       " Django migrations
    set wildignore+=*.pyc                            " Python byte code

    set wildignore+=*.orig                           " Merge resolution files


    " show character when a line breaks wrapping
    set showbreak=‚Ü™

    " Highlight invisibles
    set list
    " Highlight these problematic whitespace characters
    set listchars=tab:‚ñ∏\ ,trail:‚å¥,extends:‚ùØ,precedes:‚ùÆ
    " Show Trailing Whitespace ONLY when NOT in insert mode
    " https://bitbucket.org/sjl/dotfiles/src/8bcaac8a526e0c32b477226a9e394153178e60ca/vim/vimrc #124
    " sal note: augroup training does NOT work for me 20131013
    augroup trailing
        au!
        au InsertEnter * :set listchars-=trail:‚å¥
    augroup END

" ----- Movement Options ------
    " Moving up/down moves visually.
    " This makes files with very long lines much more manageable.
    " j,k will now move up and down within a line number
    " (if it is a line that wraps)
    nnoremap j gj
    nnoremap k gk

    " Moving left/right will wrap around to the previous/next line.
    set whichwrap=b,s,h,l,<,>,~,[,]
    " Backspace will delete whatever is behind your cursor.
    set backspace=indent,eol,start

    " Bind the 'old' up and down. Use these to skip past a very long line.
    " gj - goes to the next line number
    noremap gj j
    " gk - goes to the previous line number
    noremap gk k

    "tab switching: ctrl+left/right
    nnoremap Od :tabp<CR>
    nnoremap Oc :tabN<CR>

    " window switching with ctrl+j
    " h,j,k, or l indicates direction to switch
    " http://vimcasts.org/episodes/working-with-windows/
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l


" ----- Indentation ------
    " use spaces, not tabs
    set expandtab
    "set noexpandtab " use tabs

    " tabstop == softtabstop == shiftwidth as suggested in
    " http://vimcasts.org/episodes/tabs-and-spaces/ @5:25

    " 4-space indents
    set tabstop=4 softtabstop=4 shiftwidth=4

    " 2-space indents
    "set tabstop=2 softtabstop=2 shiftwidth=2

    " ability to change tab size setting
    " normal mode
    " no recursive
    " map \t2 to tab size 2, \t4 to tab size 4
    nnoremap <leader>t2 :set softtabstop=2 shiftwidth=2<CR>
    nnoremap <leader>t4 :set softtabstop=4 shiftwidth=4<CR>

    " to use tabs
    " set noexpandtab " or set noet

    " turn on autoindenting (for programming/html)
    set autoindent
    set smartindent " generally recommended against

    "smart indenting by filetype, better than smartindent
    "filetype on
    "filetype indent on
    "filetype plugin on

    " auto fold code
    set foldenable

" ----- Extra FileTypes ------

" from http://vimcasts.org/episodes/whitespace-preferences-and-filetypes/
" Only do this part when compiled with support for autocommands
if has("autocmd")
    " Enable file type detection
    filetype on

    " Syntax of these languages is fussy over tabs Vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " enable WordPress syntax on PHP files
    " WordPress syntax was added from
    " https://github.com/kloppster/Wordpress-Vim-Syntax
    autocmd FileType php setlocal syn=wordpress

    " Treat .js.tmpl files as JavaScript
    autocmd BufNewFile,BufRead *.js.tmpl set filetype=javascript
endif

" ----- Pathogen ------
" https://github.com/tpope/vim-pathogen
execute pathogen#infect()


" ----- Shortcuts for substituting html entities ------
" F2 replace fancy quotes with plain quotes
map <F2> :%s/[‚Äú‚Äù]/"/gc<CR>
" F3 replace & with &amp;
map <F3> :%s/\s&\s/ \&amp; /gc<CR>
"F4 replace apostrophe with plain apostrophe
map <F4> :%s/‚Äô/'/gc<CR>
" F5 maybe remove duplicate blank lines??? don't know
map <F5> :%s/\r//g<CR>
" F13 add a non-breaking space
map <F13> :.s/\s\(\S*\s*\)$/\&nbsp;\1/<ESC>

" ----- Modify word boundary characters ------
" remove - as a word boundary (by making it a keyword character)
set iskeyword+=-
" remove $ as a word boundary (by making it a keyword character)
" now viw will include $ in variable name
set iskeyword+=$

" ----- Abbreviations ------
" insert abbreviation for email address
iabbrev @@ sal@example.com

" ----- Mappings ------

" change <leader> from \ to ,
let mapleader=","

" Map jk to ESC in visual mode
"http://learnvimscriptthehardway.stevelosh.com/chapters/10.html
inoremap jk <esc>

" Map <leader>ev (i.e. \ev) to edit .vimrc
" and <leader>sv to source (apply) .vimrc
nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Map <leader>eg (i.e. \eg) to edit .gvimrc
" and <leader>sg to source (apply) .gvimrc
nnoremap <leader>eg :split $MYGVIMRC<cr>
nnoremap <leader>sg :source $MYGVIMRC<cr>

" Map <leader>el to error_log value
" takes the whatever is under the cursor and wraps it in error_log( and
" print_r( with parameter true and a label
autocmd FileType php nnoremap <leader>el ^vg_daerror_log( '<esc>pa=' . print_r( <esc>pa, true ) );<cr><esc>

" Clean trailing whitespace, https://bitbucket.org/sjl/dotfiles/src/a9942801b4db6154a5ce0ccae604da6821051cac/vim/vimrc?at=default
nnoremap <leader>w mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" ----- Plugin Modifications ------

" commentary
" https://github.com/tpope/vim-commentary

" change default comment style to // (from /* */) for
" .php and .js files
autocmd FileType php set commentstring=\/\/\ %s
autocmd FileType js set commentstring=\/\/\ %s

" NERDTree 
" <leader>d opens NERDTree

" from https://github.com/curtismchale/WPTT-Vim-Config/blob/master/.gvimrc)
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
let NERDTreeIgnore=['debug[[dir]]', 'hyperdb[[dir]]', 'gravity[[dir]]', 'akismet[[dir]]', 'user-switching[[dir]]', 'wp-migrate-db-pro[[dir]]', 'upgrade[[dir]]', 'uploads[[dir]]', 'twenty*[[dir]]']

" Open NERDTree automatically on run
" http://stackoverflow.com/questions/1447334/how-do-you-add-nerdtree-to-your-vimrc#answer-1448637
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p
